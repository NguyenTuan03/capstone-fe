'use client';

import React, { useState, useEffect } from 'react';
import {
  Card,
  Form,
  Input,
  Select,
  Button,
  Space,
  Row,
  Col,
  Typography,
  Alert,
  Divider,
  InputNumber,
  Switch,
  message,
  Tabs,
  Modal,
  List,
  Tag,
} from 'antd';

import {
  PlusOutlined,
  SaveOutlined,
  EyeOutlined,
  StarOutlined,
  TrophyOutlined,
  GiftOutlined,
  SettingOutlined,
  BulbOutlined,
} from '@ant-design/icons';

import AchievementApiService from '@/services/achievementApi';
import {
  CreateAchievementRequest,
  AchievementTemplate,
  AchievementCategory,
  AchievementRarity,
  CriteriaType,
  AchievementCriteria,
  AchievementRewards,
} from '@/types/achievement';

const { Option } = Select;
const { TextArea } = Input;
const { Text, Title } = Typography;
const { TabPane } = Tabs;

interface AchievementBuilderProps {
  onStatsUpdate: () => void;
}

const AchievementBuilder: React.FC<AchievementBuilderProps> = ({ onStatsUpdate }) => {
  // Forms
  const [basicForm] = Form.useForm();
  const [criteriaForm] = Form.useForm();
  const [rewardsForm] = Form.useForm();

  // States
  const [currentStep, setCurrentStep] = useState('basic');
  const [loading, setLoading] = useState(false);
  const [previewVisible, setPreviewVisible] = useState(false);
  const [templates, setTemplates] = useState<AchievementTemplate[]>([]);
  const [templatesVisible, setTemplatesVisible] = useState(false);

  // Form data
  const [basicData, setBasicData] = useState<any>({});
  const [criteriaData, setCriteriaData] = useState<any>({});
  const [rewardsData, setRewardsData] = useState<any>({});

  // Load templates
  useEffect(() => {
    loadTemplates();
  }, []);

  const loadTemplates = async () => {
    try {
      const templatesData = await AchievementApiService.getAchievementTemplates();
      setTemplates(templatesData);
    } catch (error) {
      console.error('Failed to load templates:', error);
    }
  };

  // Category options
  const categoryOptions = [
    { value: 'learning', label: 'H·ªçc t·∫≠p', description: 'Ho√†n th√†nh b√†i h·ªçc, quiz', icon: 'üìö' },
    { value: 'skill', label: 'K·ªπ nƒÉng', description: 'Th√†nh th·∫°o k·ªπ thu·∫≠t', icon: 'üéæ' },
    { value: 'time', label: 'Th·ªùi gian', description: 'D·ª±a tr√™n th·ªùi gian h·ªçc', icon: '‚è∞' },
    { value: 'social', label: 'X√£ h·ªôi', description: 'T∆∞∆°ng t√°c c·ªông ƒë·ªìng', icon: 'üë•' },
    { value: 'milestone', label: 'C·ªôt m·ªëc', description: 'Th√†nh t·ª±u quan tr·ªçng', icon: 'üèÅ' },
    { value: 'special', label: 'ƒê·∫∑c bi·ªát', description: 'S·ª± ki·ªán ƒë·∫∑c bi·ªát', icon: '‚ú®' },
  ];

  // Rarity options
  const rarityOptions = [
    {
      value: 'common',
      label: 'Th∆∞·ªùng',
      description: '70%+ users c√≥ th·ªÉ ƒë·∫°t',
      color: '#8c8c8c',
      points: 50,
    },
    {
      value: 'rare',
      label: 'Hi·∫øm',
      description: '30-70% users c√≥ th·ªÉ ƒë·∫°t',
      color: '#1890ff',
      points: 200,
    },
    {
      value: 'epic',
      label: 'S·ª≠ thi',
      description: '10-30% users c√≥ th·ªÉ ƒë·∫°t',
      color: '#722ed1',
      points: 500,
    },
    {
      value: 'legendary',
      label: 'Huy·ªÅn tho·∫°i',
      description: '<10% users c√≥ th·ªÉ ƒë·∫°t',
      color: '#faad14',
      points: 1000,
    },
  ];

  // Criteria type options
  const criteriaTypeOptions = [
    { value: 'lesson_count', label: 'S·ªë b√†i h·ªçc', description: 'Ho√†n th√†nh X b√†i h·ªçc' },
    { value: 'quiz_score', label: 'ƒêi·ªÉm quiz', description: 'ƒê·∫°t ƒëi·ªÉm X trong quiz' },
    { value: 'streak_days', label: 'Chu·ªói ng√†y', description: 'H·ªçc X ng√†y li√™n ti·∫øp' },
    { value: 'session_count', label: 'S·ªë session', description: 'Tham gia X sessions' },
    { value: 'chapter_complete', label: 'Ho√†n th√†nh ch∆∞∆°ng', description: 'Ho√†n th√†nh X ch∆∞∆°ng' },
    { value: 'perfect_score', label: 'ƒêi·ªÉm tuy·ªát ƒë·ªëi', description: 'ƒê·∫°t 100% trong X quiz' },
    { value: 'time_spent', label: 'Th·ªùi gian h·ªçc', description: 'H·ªçc t·ªïng c·ªông X gi·ªù' },
    { value: 'social_interaction', label: 'T∆∞∆°ng t√°c x√£ h·ªôi', description: 'T∆∞∆°ng t√°c X l·∫ßn' },
  ];

  // Icon options
  const iconOptions = [
    'üéØ',
    'üèÜ',
    'ü•á',
    'üéñÔ∏è',
    '‚≠ê',
    'üåü',
    'üí´',
    '‚ú®',
    'üìö',
    'üìñ',
    'üéì',
    'üß†',
    'üí°',
    'üî•',
    '‚ö°',
    'üöÄ',
    'üéæ',
    'üè∏',
    '‚öΩ',
    'üèÄ',
    'üé±',
    'üé™',
    'üé®',
    'üé≠',
    'üëë',
    'üíé',
    'üî±',
    '‚öîÔ∏è',
    'üõ°Ô∏è',
    'üèÖ',
    'üéä',
    'üéâ',
  ];

  // Handle form submission
  const handleSubmit = async () => {
    try {
      setLoading(true);

      // Validate all forms
      const basicValues = await basicForm.validateFields();
      const criteriaValues = await criteriaForm.validateFields();
      const rewardsValues = await rewardsForm.validateFields();

      // Create achievement request
      const request: CreateAchievementRequest = {
        name: basicValues.name,
        description: basicValues.description,
        icon: basicValues.icon,
        category: basicValues.category as AchievementCategory,
        rarity: basicValues.rarity as AchievementRarity,
        criteria: {
          type: criteriaValues.type as CriteriaType,
          target: criteriaValues.target,
          condition: criteriaValues.condition,
          timeframe: criteriaValues.timeframe,
        } as AchievementCriteria,
        rewards: {
          points: rewardsValues.points,
          badge: rewardsValues.badge,
          title: rewardsValues.title,
          description: rewardsValues.description,
          specialPerks: rewardsValues.specialPerks?.split('\n').filter(Boolean) || [],
        } as AchievementRewards,
        status: basicValues.status || 'active',
      };

      const response = await AchievementApiService.createAchievement(request);
      if (response.success) {
        message.success(response.message);
        handleReset();
        onStatsUpdate();
      } else {
        message.error(response.message);
      }
    } catch (error) {
      message.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin');
    } finally {
      setLoading(false);
    }
  };

  // Handle reset
  const handleReset = () => {
    basicForm.resetFields();
    criteriaForm.resetFields();
    rewardsForm.resetFields();
    setBasicData({});
    setCriteriaData({});
    setRewardsData({});
    setCurrentStep('basic');
  };

  // Handle template selection
  const handleTemplateSelect = (template: AchievementTemplate) => {
    // Fill basic form
    basicForm.setFieldsValue({
      name: template.name,
      description: template.description,
      category: template.category,
      icon: 'üéØ', // Default icon
    });

    // Fill criteria form
    criteriaForm.setFieldsValue({
      type: template.criteria.type,
      target: template.criteria.target,
      condition: template.criteria.condition,
    });

    // Fill rewards form
    rewardsForm.setFieldsValue({
      points: template.rewards.points,
      badge: template.rewards.badge,
      description: template.rewards.description,
    });

    setTemplatesVisible(false);
    message.success('ƒê√£ √°p d·ª•ng template th√†nh c√¥ng');
  };

  // Auto-suggest points based on rarity
  const handleRarityChange = (rarity: AchievementRarity) => {
    const rarityConfig = rarityOptions.find((r) => r.value === rarity);
    if (rarityConfig) {
      rewardsForm.setFieldsValue({ points: rarityConfig.points });
    }
  };

  return (
    <div>
      {/* Header */}
      <div
        style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: '16px',
        }}
      >
        <div>
          <Title level={4} style={{ margin: 0 }}>
            T·∫°o Achievement M·ªõi
          </Title>
          <Text type="secondary">Thi·∫øt k·∫ø achievement ƒë·ªÉ tƒÉng ƒë·ªông l·ª±c h·ªçc t·∫≠p</Text>
        </div>
        <Space>
          <Button icon={<BulbOutlined />} onClick={() => setTemplatesVisible(true)}>
            Templates
          </Button>
          <Button icon={<EyeOutlined />} onClick={() => setPreviewVisible(true)}>
            Xem tr∆∞·ªõc
          </Button>
          <Button onClick={handleReset}>ƒê·∫∑t l·∫°i</Button>
        </Space>
      </div>

      <Row gutter={24}>
        {/* Form Section */}
        <Col xs={24} lg={16}>
          <Card>
            <Tabs activeKey={currentStep} onChange={setCurrentStep} type="card">
              {/* Basic Information */}
              <TabPane
                tab={
                  <span>
                    <SettingOutlined />
                    Th√¥ng tin c∆° b·∫£n
                  </span>
                }
                key="basic"
              >
                <Form
                  form={basicForm}
                  layout="vertical"
                  onValuesChange={(_, values) => setBasicData(values)}
                >
                  <Row gutter={16}>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="name"
                        label="T√™n Achievement"
                        rules={[
                          { required: true, message: 'Vui l√≤ng nh·∫≠p t√™n achievement' },
                          { max: 50, message: 'T√™n kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±' },
                        ]}
                      >
                        <Input placeholder="VD: B∆∞·ªõc ƒë·∫ßu ti√™n" />
                      </Form.Item>
                    </Col>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="icon"
                        label="Icon"
                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn icon' }]}
                      >
                        <Select placeholder="Ch·ªçn icon">
                          {iconOptions.map((icon) => (
                            <Option key={icon} value={icon}>
                              <span style={{ fontSize: '16px', marginRight: '8px' }}>{icon}</span>
                              {icon}
                            </Option>
                          ))}
                        </Select>
                      </Form.Item>
                    </Col>
                  </Row>

                  <Form.Item
                    name="description"
                    label="M√¥ t·∫£"
                    rules={[
                      { required: true, message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£' },
                      { max: 200, message: 'M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c qu√° 200 k√Ω t·ª±' },
                    ]}
                  >
                    <TextArea
                      rows={3}
                      placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ achievement n√†y..."
                      showCount
                      maxLength={200}
                    />
                  </Form.Item>

                  <Row gutter={16}>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="category"
                        label="Danh m·ª•c"
                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn danh m·ª•c' }]}
                      >
                        <Select placeholder="Ch·ªçn danh m·ª•c">
                          {categoryOptions.map((option) => (
                            <Option key={option.value} value={option.value}>
                              <div style={{ display: 'flex', alignItems: 'center' }}>
                                <span style={{ fontSize: '16px', marginRight: '8px' }}>
                                  {option.icon}
                                </span>
                                <div>
                                  <div>{option.label}</div>
                                  <div style={{ fontSize: '12px', color: '#666' }}>
                                    {option.description}
                                  </div>
                                </div>
                              </div>
                            </Option>
                          ))}
                        </Select>
                      </Form.Item>
                    </Col>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="rarity"
                        label="ƒê·ªô hi·∫øm"
                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ƒë·ªô hi·∫øm' }]}
                      >
                        <Select placeholder="Ch·ªçn ƒë·ªô hi·∫øm" onChange={handleRarityChange}>
                          {rarityOptions.map((option) => (
                            <Option key={option.value} value={option.value}>
                              <div style={{ display: 'flex', alignItems: 'center' }}>
                                <div
                                  style={{
                                    width: '12px',
                                    height: '12px',
                                    borderRadius: '50%',
                                    backgroundColor: option.color,
                                    marginRight: '8px',
                                  }}
                                />
                                <div>
                                  <div>{option.label}</div>
                                  <div style={{ fontSize: '12px', color: '#666' }}>
                                    {option.description}
                                  </div>
                                </div>
                              </div>
                            </Option>
                          ))}
                        </Select>
                      </Form.Item>
                    </Col>
                  </Row>

                  <Form.Item name="status" label="Tr·∫°ng th√°i" initialValue="active">
                    <Select>
                      <Option value="active">Ho·∫°t ƒë·ªông</Option>
                      <Option value="inactive">Kh√¥ng ho·∫°t ƒë·ªông</Option>
                    </Select>
                  </Form.Item>
                </Form>
              </TabPane>

              {/* Criteria */}
              <TabPane
                tab={
                  <span>
                    <TrophyOutlined />
                    ƒêi·ªÅu ki·ªán
                  </span>
                }
                key="criteria"
              >
                <Form
                  form={criteriaForm}
                  layout="vertical"
                  onValuesChange={(_, values) => setCriteriaData(values)}
                >
                  <Form.Item
                    name="type"
                    label="Lo·∫°i ƒëi·ªÅu ki·ªán"
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn lo·∫°i ƒëi·ªÅu ki·ªán' }]}
                  >
                    <Select placeholder="Ch·ªçn lo·∫°i ƒëi·ªÅu ki·ªán">
                      {criteriaTypeOptions.map((option) => (
                        <Option key={option.value} value={option.value}>
                          <div>
                            <div>{option.label}</div>
                            <div style={{ fontSize: '12px', color: '#666' }}>
                              {option.description}
                            </div>
                          </div>
                        </Option>
                      ))}
                    </Select>
                  </Form.Item>

                  <Row gutter={16}>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="target"
                        label="M·ª•c ti√™u"
                        rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m·ª•c ti√™u' }]}
                      >
                        <InputNumber
                          min={1}
                          max={10000}
                          placeholder="VD: 10"
                          style={{ width: '100%' }}
                        />
                      </Form.Item>
                    </Col>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="timeframe"
                        label="Khung th·ªùi gian (ng√†y)"
                        tooltip="ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng gi·ªõi h·∫°n th·ªùi gian"
                      >
                        <InputNumber
                          min={1}
                          max={365}
                          placeholder="VD: 30"
                          style={{ width: '100%' }}
                        />
                      </Form.Item>
                    </Col>
                  </Row>

                  <Form.Item
                    name="condition"
                    label="ƒêi·ªÅu ki·ªán b·ªï sung"
                    tooltip="ƒêi·ªÅu ki·ªán chi ti·∫øt (t√πy ch·ªçn)"
                  >
                    <Input placeholder="VD: complete_first_lesson" />
                  </Form.Item>

                  <Alert
                    message="G·ª£i √Ω thi·∫øt k·∫ø"
                    description="H√£y thi·∫øt k·∫ø ƒëi·ªÅu ki·ªán v·ª´a th·ª≠ th√°ch nh∆∞ng v·∫´n kh·∫£ thi. Achievement qu√° d·ªÖ s·∫Ω m·∫•t gi√° tr·ªã, qu√° kh√≥ s·∫Ω l√†m ng∆∞·ªùi d√πng n·∫£n l√≤ng."
                    type="info"
                    showIcon
                  />
                </Form>
              </TabPane>

              {/* Rewards */}
              <TabPane
                tab={
                  <span>
                    <GiftOutlined />
                    Ph·∫ßn th∆∞·ªüng
                  </span>
                }
                key="rewards"
              >
                <Form
                  form={rewardsForm}
                  layout="vertical"
                  onValuesChange={(_, values) => setRewardsData(values)}
                >
                  <Row gutter={16}>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="points"
                        label="ƒêi·ªÉm th∆∞·ªüng"
                        rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ƒëi·ªÉm th∆∞·ªüng' }]}
                      >
                        <InputNumber
                          min={1}
                          max={10000}
                          placeholder="VD: 100"
                          style={{ width: '100%' }}
                        />
                      </Form.Item>
                    </Col>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="badge"
                        label="Badge ID"
                        rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p badge ID' }]}
                      >
                        <Input placeholder="VD: first-step-badge" />
                      </Form.Item>
                    </Col>
                  </Row>

                  <Form.Item
                    name="title"
                    label="Danh hi·ªáu"
                    rules={[{ max: 30, message: 'Danh hi·ªáu kh√¥ng ƒë∆∞·ª£c qu√° 30 k√Ω t·ª±' }]}
                  >
                    <Input placeholder="VD: Ng∆∞·ªùi h·ªçc m·ªõi" />
                  </Form.Item>

                  <Form.Item
                    name="description"
                    label="M√¥ t·∫£ ph·∫ßn th∆∞·ªüng"
                    rules={[
                      { required: true, message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£ ph·∫ßn th∆∞·ªüng' },
                      { max: 150, message: 'M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c qu√° 150 k√Ω t·ª±' },
                    ]}
                  >
                    <TextArea
                      rows={2}
                      placeholder="M√¥ t·∫£ v·ªÅ ph·∫ßn th∆∞·ªüng n√†y..."
                      showCount
                      maxLength={150}
                    />
                  </Form.Item>

                  <Form.Item
                    name="specialPerks"
                    label="ƒê·∫∑c quy·ªÅn ƒë·∫∑c bi·ªát"
                    tooltip="M·ªói ƒë·∫∑c quy·ªÅn tr√™n m·ªôt d√≤ng"
                  >
                    <TextArea
                      rows={4}
                      placeholder={`Unlock profile badge\nPriority booking\nSpecial discount`}
                    />
                  </Form.Item>

                  <Alert
                    message="L∆∞u √Ω v·ªÅ ph·∫ßn th∆∞·ªüng"
                    description="Ph·∫ßn th∆∞·ªüng n√™n t∆∞∆°ng x·ª©ng v·ªõi ƒë·ªô kh√≥ c·ªßa achievement. ƒê·∫∑c quy·ªÅn ƒë·∫∑c bi·ªát s·∫Ω tƒÉng gi√° tr·ªã v√† s·ª©c h·∫•p d·∫´n."
                    type="warning"
                    showIcon
                  />
                </Form>
              </TabPane>
            </Tabs>

            {/* Action Buttons */}
            <Divider />
            <div style={{ textAlign: 'right' }}>
              <Space>
                <Button onClick={handleReset}>ƒê·∫∑t l·∫°i</Button>
                <Button
                  type="primary"
                  icon={<SaveOutlined />}
                  loading={loading}
                  onClick={handleSubmit}
                >
                  T·∫°o Achievement
                </Button>
              </Space>
            </div>
          </Card>
        </Col>

        {/* Preview Section */}
        <Col xs={24} lg={8}>
          <Card title="Xem tr∆∞·ªõc" style={{ position: 'sticky', top: '24px' }}>
            <div style={{ textAlign: 'center', padding: '20px 0' }}>
              {/* Icon */}
              <div style={{ fontSize: '48px', marginBottom: '12px' }}>{basicData.icon || 'üéØ'}</div>

              {/* Name */}
              <Title level={4} style={{ margin: '0 0 8px 0' }}>
                {basicData.name || 'T√™n Achievement'}
              </Title>

              {/* Badges */}
              <div style={{ marginBottom: '12px' }}>
                {basicData.category && (
                  <Tag color={AchievementApiService.getCategoryColor(basicData.category)}>
                    {categoryOptions.find((c) => c.value === basicData.category)?.label}
                  </Tag>
                )}
                {basicData.rarity && (
                  <Tag color={AchievementApiService.getRarityColor(basicData.rarity)}>
                    {rarityOptions.find((r) => r.value === basicData.rarity)?.label}
                  </Tag>
                )}
              </div>

              {/* Description */}
              <Text style={{ display: 'block', marginBottom: '16px', color: '#666' }}>
                {basicData.description || 'M√¥ t·∫£ achievement s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y'}
              </Text>

              {/* Criteria */}
              {criteriaData.type && (
                <Card size="small" style={{ marginBottom: '12px', textAlign: 'left' }}>
                  <Text strong>ƒêi·ªÅu ki·ªán:</Text>
                  <br />
                  <Text>
                    {criteriaTypeOptions.find((c) => c.value === criteriaData.type)?.label}:{' '}
                    {criteriaData.target || 0}
                  </Text>
                </Card>
              )}

              {/* Rewards */}
              {rewardsData.points && (
                <Card size="small" style={{ textAlign: 'left' }}>
                  <Text strong>Ph·∫ßn th∆∞·ªüng:</Text>
                  <br />
                  <Text>üèÜ {rewardsData.points} ƒëi·ªÉm</Text>
                  {rewardsData.title && (
                    <>
                      <br />
                      <Text>üëë {rewardsData.title}</Text>
                    </>
                  )}
                </Card>
              )}
            </div>
          </Card>
        </Col>
      </Row>

      {/* Templates Modal */}
      <Modal
        title="Ch·ªçn Template"
        open={templatesVisible}
        onCancel={() => setTemplatesVisible(false)}
        footer={null}
        width={800}
      >
        <List
          grid={{ gutter: 16, xs: 1, sm: 2, md: 2, lg: 2, xl: 2, xxl: 2 }}
          dataSource={templates}
          renderItem={(template) => (
            <List.Item>
              <Card
                hoverable
                size="small"
                onClick={() => handleTemplateSelect(template)}
                extra={template.isPopular && <Tag color="gold">Ph·ªï bi·∫øn</Tag>}
              >
                <Card.Meta
                  title={template.name}
                  description={
                    <div>
                      <Text style={{ fontSize: '12px', color: '#666' }}>
                        {template.description}
                      </Text>
                      <div style={{ marginTop: '8px' }}>
                        <Tag color={AchievementApiService.getCategoryColor(template.category)}>
                          {categoryOptions.find((c) => c.value === template.category)?.label}
                        </Tag>
                        <Tag color="gold">{template.rewards.points} pts</Tag>
                      </div>
                    </div>
                  }
                />
              </Card>
            </List.Item>
          )}
        />
      </Modal>
    </div>
  );
};

export default AchievementBuilder;
